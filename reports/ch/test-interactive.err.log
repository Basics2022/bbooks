Traceback (most recent call last):
  File "/home/davide/.local/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/davide/.local/lib/python3.8/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/davide/.local/lib/python3.8/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/usr/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/home/davide/.local/lib/python3.8/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/home/davide/.local/lib/python3.8/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/davide/.local/lib/python3.8/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from plotly.subplots import make_subplots
import plotly.graph_objects as go

fig = make_subplots(rows=1, cols=2)

fig.add_trace(
    go.Scatter(x=[1, 2, 3], y=[4, 5, 6]),
    row=1, col=1
)

fig.add_trace(
    go.Scatter(x=[20, 30, 40], y=[50, 60, 70]),
    row=1, col=2
)

sliders = [dict(
    active=3,
    currentvalue={"prefix": "a/b: "},
    steps=range(5)
)]

fig.update_layout(
    sliders=sliders,
    legend_title="Legend",
)
fig.update_layout(height=600, width=800, title_text="Side By Side Subplots")

fig
# fig.show()

------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mValueError[0m                                Traceback (most recent call last)
Cell [0;32mIn[3], line 22[0m
[1;32m     11[0m fig[38;5;241m.[39madd_trace(
[1;32m     12[0m     go[38;5;241m.[39mScatter(x[38;5;241m=[39m[[38;5;241m20[39m, [38;5;241m30[39m, [38;5;241m40[39m], y[38;5;241m=[39m[[38;5;241m50[39m, [38;5;241m60[39m, [38;5;241m70[39m]),
[1;32m     13[0m     row[38;5;241m=[39m[38;5;241m1[39m, col[38;5;241m=[39m[38;5;241m2[39m
[1;32m     14[0m )
[1;32m     16[0m sliders [38;5;241m=[39m [[38;5;28mdict[39m(
[1;32m     17[0m     active[38;5;241m=[39m[38;5;241m3[39m,
[1;32m     18[0m     currentvalue[38;5;241m=[39m{[38;5;124m"[39m[38;5;124mprefix[39m[38;5;124m"[39m: [38;5;124m"[39m[38;5;124ma/b: [39m[38;5;124m"[39m},
[1;32m     19[0m     steps[38;5;241m=[39m[38;5;28mrange[39m([38;5;241m5[39m)
[1;32m     20[0m )]
[0;32m---> 22[0m [43mfig[49m[38;5;241;43m.[39;49m[43mupdate_layout[49m[43m([49m
[1;32m     23[0m [43m    [49m[43msliders[49m[38;5;241;43m=[39;49m[43msliders[49m[43m,[49m
[1;32m     24[0m [43m    [49m[43mlegend_title[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mLegend[39;49m[38;5;124;43m"[39;49m[43m,[49m
[1;32m     25[0m [43m)[49m
[1;32m     26[0m fig[38;5;241m.[39mupdate_layout(height[38;5;241m=[39m[38;5;241m600[39m, width[38;5;241m=[39m[38;5;241m800[39m, title_text[38;5;241m=[39m[38;5;124m"[39m[38;5;124mSide By Side Subplots[39m[38;5;124m"[39m)
[1;32m     28[0m fig

File [0;32m~/.local/lib/python3.8/site-packages/plotly/graph_objs/_figure.py:792[0m, in [0;36mFigure.update_layout[0;34m(self, dict1, overwrite, **kwargs)[0m
[1;32m    766[0m [38;5;28;01mdef[39;00m [38;5;21mupdate_layout[39m([38;5;28mself[39m, dict1[38;5;241m=[39m[38;5;28;01mNone[39;00m, overwrite[38;5;241m=[39m[38;5;28;01mFalse[39;00m, [38;5;241m*[39m[38;5;241m*[39mkwargs) [38;5;241m-[39m[38;5;241m>[39m [38;5;124m"[39m[38;5;124mFigure[39m[38;5;124m"[39m:
[1;32m    767[0m [38;5;250m    [39m[38;5;124;03m"""[39;00m
[1;32m    768[0m 
[1;32m    769[0m [38;5;124;03m    Update the properties of the figure's layout with a dict and/or with[39;00m
[0;32m   (...)[0m
[1;32m    790[0m 
[1;32m    791[0m [38;5;124;03m    """[39;00m
[0;32m--> 792[0m     [38;5;28;01mreturn[39;00m [38;5;28;43msuper[39;49m[43m([49m[43mFigure[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[43m)[49m[38;5;241;43m.[39;49m[43mupdate_layout[49m[43m([49m[43mdict1[49m[43m,[49m[43m [49m[43moverwrite[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m

File [0;32m~/.local/lib/python3.8/site-packages/plotly/basedatatypes.py:1391[0m, in [0;36mBaseFigure.update_layout[0;34m(self, dict1, overwrite, **kwargs)[0m
[1;32m   1367[0m [38;5;28;01mdef[39;00m [38;5;21mupdate_layout[39m([38;5;28mself[39m, dict1[38;5;241m=[39m[38;5;28;01mNone[39;00m, overwrite[38;5;241m=[39m[38;5;28;01mFalse[39;00m, [38;5;241m*[39m[38;5;241m*[39mkwargs):
[1;32m   1368[0m [38;5;250m    [39m[38;5;124;03m"""[39;00m
[1;32m   1369[0m [38;5;124;03m    Update the properties of the figure's layout with a dict and/or with[39;00m
[1;32m   1370[0m [38;5;124;03m    keyword arguments.[39;00m
[0;32m   (...)[0m
[1;32m   1389[0m [38;5;124;03m        The Figure object that the update_layout method was called on[39;00m
[1;32m   1390[0m [38;5;124;03m    """[39;00m
[0;32m-> 1391[0m     [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mlayout[49m[38;5;241;43m.[39;49m[43mupdate[49m[43m([49m[43mdict1[49m[43m,[49m[43m [49m[43moverwrite[49m[38;5;241;43m=[39;49m[43moverwrite[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m   1392[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m

File [0;32m~/.local/lib/python3.8/site-packages/plotly/basedatatypes.py:5131[0m, in [0;36mBasePlotlyType.update[0;34m(self, dict1, overwrite, **kwargs)[0m
[1;32m   5129[0m     [38;5;28;01mwith[39;00m [38;5;28mself[39m[38;5;241m.[39mfigure[38;5;241m.[39mbatch_update():
[1;32m   5130[0m         BaseFigure[38;5;241m.[39m_perform_update([38;5;28mself[39m, dict1, overwrite[38;5;241m=[39moverwrite)
[0;32m-> 5131[0m         [43mBaseFigure[49m[38;5;241;43m.[39;49m[43m_perform_update[49m[43m([49m[38;5;28;43mself[39;49m[43m,[49m[43m [49m[43mkwargs[49m[43m,[49m[43m [49m[43moverwrite[49m[38;5;241;43m=[39;49m[43moverwrite[49m[43m)[49m
[1;32m   5132[0m [38;5;28;01melse[39;00m:
[1;32m   5133[0m     BaseFigure[38;5;241m.[39m_perform_update([38;5;28mself[39m, dict1, overwrite[38;5;241m=[39moverwrite)

File [0;32m~/.local/lib/python3.8/site-packages/plotly/basedatatypes.py:3931[0m, in [0;36mBaseFigure._perform_update[0;34m(plotly_obj, update_obj, overwrite)[0m
[1;32m   3925[0m             plotly_obj[key] [38;5;241m=[39m plotly_obj[key] [38;5;241m+[39m [38;5;28mtuple[39m(
[1;32m   3926[0m                 val[[38;5;28mlen[39m(plotly_obj[key]) :]
[1;32m   3927[0m             )
[1;32m   3928[0m     [38;5;28;01melse[39;00m:
[1;32m   3929[0m         [38;5;66;03m# plotly_obj is an empty or uninitialized list for key[39;00m
[1;32m   3930[0m         [38;5;66;03m# In this case we accept val as is[39;00m
[0;32m-> 3931[0m         [43mplotly_obj[49m[43m[[49m[43mkey[49m[43m][49m [38;5;241m=[39m val
[1;32m   3932[0m [38;5;28;01melse[39;00m:
[1;32m   3933[0m     [38;5;66;03m# Assign non-compound value[39;00m
[1;32m   3934[0m     plotly_obj[key] [38;5;241m=[39m val

File [0;32m~/.local/lib/python3.8/site-packages/plotly/basedatatypes.py:5906[0m, in [0;36mBaseLayoutType.__setitem__[0;34m(self, prop, value)[0m
[1;32m   5903[0m match [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_subplot_re_match(prop)
[1;32m   5904[0m [38;5;28;01mif[39;00m match [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[1;32m   5905[0m     [38;5;66;03m# Set as ordinary property[39;00m
[0;32m-> 5906[0m     [38;5;28;43msuper[39;49m[43m([49m[43mBaseLayoutHierarchyType[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[43m)[49m[38;5;241;43m.[39;49m[38;5;21;43m__setitem__[39;49m[43m([49m[43mprop[49m[43m,[49m[43m [49m[43mvalue[49m[43m)[49m
[1;32m   5907[0m [38;5;28;01melse[39;00m:
[1;32m   5908[0m     [38;5;66;03m# Set as subplotid property[39;00m
[1;32m   5909[0m     [38;5;28mself[39m[38;5;241m.[39m_set_subplotid_prop(prop, value)

File [0;32m~/.local/lib/python3.8/site-packages/plotly/basedatatypes.py:4864[0m, in [0;36mBasePlotlyType.__setitem__[0;34m(self, prop, value)[0m
[1;32m   4862[0m [38;5;66;03m# ### Handle compound array property ###[39;00m
[1;32m   4863[0m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(validator, (CompoundArrayValidator, BaseDataValidator)):
[0;32m-> 4864[0m     [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_set_array_prop[49m[43m([49m[43mprop[49m[43m,[49m[43m [49m[43mvalue[49m[43m)[49m
[1;32m   4866[0m [38;5;66;03m# ### Handle simple property ###[39;00m
[1;32m   4867[0m [38;5;28;01melse[39;00m:
[1;32m   4868[0m     [38;5;28mself[39m[38;5;241m.[39m_set_prop(prop, value)

File [0;32m~/.local/lib/python3.8/site-packages/plotly/basedatatypes.py:5345[0m, in [0;36mBasePlotlyType._set_array_prop[0;34m(self, prop, val)[0m
[1;32m   5342[0m [38;5;66;03m# Import value[39;00m
[1;32m   5343[0m [38;5;66;03m# ------------[39;00m
[1;32m   5344[0m validator [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_get_validator(prop)
[0;32m-> 5345[0m val [38;5;241m=[39m [43mvalidator[49m[38;5;241;43m.[39;49m[43mvalidate_coerce[49m[43m([49m[43mval[49m[43m,[49m[43m [49m[43mskip_invalid[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_skip_invalid[49m[43m)[49m
[1;32m   5347[0m [38;5;66;03m# Save deep copies of current and new states[39;00m
[1;32m   5348[0m [38;5;66;03m# ------------------------------------------[39;00m
[1;32m   5349[0m curr_val [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_compound_array_props[38;5;241m.[39mget(prop, [38;5;28;01mNone[39;00m)

File [0;32m~/.local/lib/python3.8/site-packages/_plotly_utils/basevalidators.py:2604[0m, in [0;36mCompoundArrayValidator.validate_coerce[0;34m(self, v, skip_invalid)[0m
[1;32m   2602[0m     res[38;5;241m.[39mappend([38;5;28mself[39m[38;5;241m.[39mdata_class(v_el))
[1;32m   2603[0m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(v_el, [38;5;28mdict[39m):
[0;32m-> 2604[0m     res[38;5;241m.[39mappend([38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mdata_class[49m[43m([49m[43mv_el[49m[43m,[49m[43m [49m[43mskip_invalid[49m[38;5;241;43m=[39;49m[43mskip_invalid[49m[43m)[49m)
[1;32m   2605[0m [38;5;28;01melse[39;00m:
[1;32m   2606[0m     [38;5;28;01mif[39;00m skip_invalid:

File [0;32m~/.local/lib/python3.8/site-packages/plotly/graph_objs/layout/_slider.py:1156[0m, in [0;36mSlider.__init__[0;34m(self, arg, active, activebgcolor, bgcolor, bordercolor, borderwidth, currentvalue, font, len, lenmode, minorticklen, name, pad, steps, stepdefaults, templateitemname, tickcolor, ticklen, tickwidth, transition, visible, x, xanchor, y, yanchor, **kwargs)[0m
[1;32m   1154[0m _v [38;5;241m=[39m steps [38;5;28;01mif[39;00m steps [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m [38;5;28;01melse[39;00m _v
[1;32m   1155[0m [38;5;28;01mif[39;00m _v [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[0;32m-> 1156[0m     [38;5;28;43mself[39;49m[43m[[49m[38;5;124;43m"[39;49m[38;5;124;43msteps[39;49m[38;5;124;43m"[39;49m[43m][49m [38;5;241m=[39m _v
[1;32m   1157[0m _v [38;5;241m=[39m arg[38;5;241m.[39mpop([38;5;124m"[39m[38;5;124mstepdefaults[39m[38;5;124m"[39m, [38;5;28;01mNone[39;00m)
[1;32m   1158[0m _v [38;5;241m=[39m stepdefaults [38;5;28;01mif[39;00m stepdefaults [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m [38;5;28;01melse[39;00m _v

File [0;32m~/.local/lib/python3.8/site-packages/plotly/basedatatypes.py:4864[0m, in [0;36mBasePlotlyType.__setitem__[0;34m(self, prop, value)[0m
[1;32m   4862[0m [38;5;66;03m# ### Handle compound array property ###[39;00m
[1;32m   4863[0m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(validator, (CompoundArrayValidator, BaseDataValidator)):
[0;32m-> 4864[0m     [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_set_array_prop[49m[43m([49m[43mprop[49m[43m,[49m[43m [49m[43mvalue[49m[43m)[49m
[1;32m   4866[0m [38;5;66;03m# ### Handle simple property ###[39;00m
[1;32m   4867[0m [38;5;28;01melse[39;00m:
[1;32m   4868[0m     [38;5;28mself[39m[38;5;241m.[39m_set_prop(prop, value)

File [0;32m~/.local/lib/python3.8/site-packages/plotly/basedatatypes.py:5345[0m, in [0;36mBasePlotlyType._set_array_prop[0;34m(self, prop, val)[0m
[1;32m   5342[0m [38;5;66;03m# Import value[39;00m
[1;32m   5343[0m [38;5;66;03m# ------------[39;00m
[1;32m   5344[0m validator [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_get_validator(prop)
[0;32m-> 5345[0m val [38;5;241m=[39m [43mvalidator[49m[38;5;241;43m.[39;49m[43mvalidate_coerce[49m[43m([49m[43mval[49m[43m,[49m[43m [49m[43mskip_invalid[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_skip_invalid[49m[43m)[49m
[1;32m   5347[0m [38;5;66;03m# Save deep copies of current and new states[39;00m
[1;32m   5348[0m [38;5;66;03m# ------------------------------------------[39;00m
[1;32m   5349[0m curr_val [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_compound_array_props[38;5;241m.[39mget(prop, [38;5;28;01mNone[39;00m)

File [0;32m~/.local/lib/python3.8/site-packages/_plotly_utils/basevalidators.py:2620[0m, in [0;36mCompoundArrayValidator.validate_coerce[0;34m(self, v, skip_invalid)[0m
[1;32m   2618[0m         v [38;5;241m=[39m []
[1;32m   2619[0m     [38;5;28;01melse[39;00m:
[0;32m-> 2620[0m         [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mraise_invalid_val[49m[43m([49m[43mv[49m[43m)[49m
[1;32m   2622[0m [38;5;28;01mreturn[39;00m v

File [0;32m~/.local/lib/python3.8/site-packages/_plotly_utils/basevalidators.py:296[0m, in [0;36mBaseValidator.raise_invalid_val[0;34m(self, v, inds)[0m
[1;32m    293[0m             [38;5;28;01mfor[39;00m i [38;5;129;01min[39;00m inds:
[1;32m    294[0m                 name [38;5;241m+[39m[38;5;241m=[39m [38;5;124m"[39m[38;5;124m[[39m[38;5;124m"[39m [38;5;241m+[39m [38;5;28mstr[39m(i) [38;5;241m+[39m [38;5;124m"[39m[38;5;124m][39m[38;5;124m"[39m
[0;32m--> 296[0m         [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(
[1;32m    297[0m [38;5;250m            [39m[38;5;124;03m"""[39;00m
[1;32m    298[0m [38;5;124;03m    Invalid value of type {typ} received for the '{name}' property of {pname}[39;00m
[1;32m    299[0m [38;5;124;03m        Received value: {v}[39;00m
[1;32m    300[0m 
[1;32m    301[0m [38;5;124;03m{valid_clr_desc}"""[39;00m[38;5;241m.[39mformat(
[1;32m    302[0m                 name[38;5;241m=[39mname,
[1;32m    303[0m                 pname[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39mparent_name,
[1;32m    304[0m                 typ[38;5;241m=[39mtype_str(v),
[1;32m    305[0m                 v[38;5;241m=[39m[38;5;28mrepr[39m(v),
[1;32m    306[0m                 valid_clr_desc[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39mdescription(),
[1;32m    307[0m             )
[1;32m    308[0m         )

[0;31mValueError[0m: 
    Invalid value of type 'builtins.range' received for the 'steps' property of layout.slider
        Received value: range(0, 5)

    The 'steps' property is a tuple of instances of
    Step that may be specified as:
      - A list or tuple of instances of plotly.graph_objs.layout.slider.Step
      - A list or tuple of dicts of string/value properties that
        will be passed to the Step constructor

        Supported dict properties:
            
            args
                Sets the arguments values to be passed to the
                Plotly method set in `method` on slide.
            execute
                When true, the API method is executed. When
                false, all other behaviors are the same and
                command execution is skipped. This may be
                useful when hooking into, for example, the
                `plotly_sliderchange` method and executing the
                API command manually without losing the benefit
                of the slider automatically binding to the
                state of the plot through the specification of
                `method` and `args`.
            label
                Sets the text label to appear on the slider
            method
                Sets the Plotly method to be called when the
                slider value is changed. If the `skip` method
                is used, the API slider will function as normal
                but will perform no API calls and will not bind
                automatically to state updates. This may be
                used to create a component interface and attach
                to slider events manually via JavaScript.
            name
                When used in a template, named items are
                created in the output figure in addition to any
                items the figure already has in this array. You
                can modify these items in the output figure by
                making your own item with `templateitemname`
                matching this `name` alongside your
                modifications (including `visible: false` or
                `enabled: false` to hide it). Has no effect
                outside of a template.
            templateitemname
                Used to refer to a named item in this array in
                the template. Named items from the template
                will be created even without a matching item in
                the input figure, but you can modify one by
                making an item with `templateitemname` matching
                its `name`, alongside your modifications
                (including `visible: false` or `enabled: false`
                to hide it). If there is no template or no
                matching item, this item will be hidden unless
                you explicitly show it with `visible: true`.
            value
                Sets the value of the slider step, used to
                refer to the step programatically. Defaults to
                the slider label if not provided.
            visible
                Determines whether or not this step is included
                in the slider.


